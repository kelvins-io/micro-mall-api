package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x8e\xdb\x44\x14\xbe\xcf\x53\x8c\x0c\x97\xa8\x5b\x0a\xe2\xa2\x77\x21\x0d\xed\xaa\x34\x41\x71\x22\x81\x50\x65\xcd\xda\x27\xc9\x74\xe3\x19\x77\x7e\x96\x46\x68\x25\x0a\x14\x15\x69\x81\x4a\xa5\x2c\x2d\x15\x12\x08\x55\x08\xa4\xee\x1d\x54\x5b\x24\x5e\x66\x9d\xb6\x57\xbc\x02\x1a\xdb\xf1\xda\x8e\x9d\x38\x4e\x43\x5b\xd4\x48\x2b\x6d\xe6\xe7\xf8\x3b\x73\xce\x77\xce\x37\xce\xc7\x35\x84\x0c\xf1\x11\x1e\x0c\x80\x1b\xa7\x91\x71\xea\xc4\x49\xe3\x35\x3d\x46\x68\x9f\x19\xa7\x91\x9e\x47\xc8\x90\x44\x8e\x40\xcf\x7b\x9c\x49\xb6\xe1\x12\x9b\x33\xcb\xc5\xa3\x91\xc5\xb8\x03\xdc\x0a\x87\xc3\xff\xb7\x94\x20\x14\x84\xc8\x7c\x3d\x11\xac\x09\x8c\x23\x64\xec\x00\x17\x84\x51\x6d\x32\xfa\x17\x51\x26\x91\x00\x69\xd4\x10\xda\x0d\x20\xd8\x8c\x0a\xe5\x82\x30\x4e\xa3\x0f\xc3\x5d\xd8\xf3\x46\xc4\xc6\x92\x30\xba\x71\x49\x30\xaa\xd7\x5e\x0c\xd6\x7a\x9c\x39\xca\x2e\xb9\x16\xcb\xa1\x38\xf6\x6d\x63\xe7\xf5\x10\xea\x86\xcd\x01\x4b\x88\x67\xf4\x52\x26\x64\xe2\xbb\x3e\x2b\xe5\xba\x98\x8f\x35\x70\xff\xfa\x0f\xfe\xc3\xc3\xc7\xf7\x7f\xf6\xbf\xba\x15\xf9\x15\x2c\x61\x1e\xf0\xe0\xb9\x9b\x8e\x5e\xd6\xd6\xb6\xdf\x8e\x4e\xc1\x04\xbe\x43\x6c\xb0\x1a\xc1\xa3\x82\xa9\xe4\x56\x0e\xc2\x63\x54\x80\x48\x3d\x14\x21\xe3\xd4\xc9\x93\x99\x21\x84\x0c\x07\x84\xcd\x89\x27\xa3\x83\xac\x23\xa1\x6c\x1b\x84\xe8\xab\x11\x9a\x5a\x3a\x91\x30\x1f\x3a\x60\x0f\xc1\xc5\x33\xc6\x10\x32\x5e\xe5\xd0\xd7\x76\x5e\xd9\x70\xa0\x4f\x28\xd1\x76\xb3\x51\x4c\xe0\xee\x44\x4f\x30\x52\x76\x76\x13\xdf\x76\x93\x8f\x36\x1c\xe8\x63\x35\x92\x8b\xdd\xa0\x48\x51\xb8\xe2\x81\x2d\xc1\x41\xc0\x39\xe3\xb1\x37\xab\x3a\xc3\x15\x95\xc4\x85\xa6\x36\x3a\x07\x77\x2d\xc7\x03\xc3\xc3\x1c\xbb\x20\x81\x1f\x27\x59\xf8\xc9\xb8\x43\xb1\x1b\x50\x65\x8b\x39\xe3\x2c\x5e\x42\x8b\x66\x38\x5c\x56\x84\x83\xce\x18\xc9\x15\xac\x2f\x68\x97\x15\x08\x59\xc6\xf7\x8b\x09\xdf\x25\x1e\x64\xbd\xce\xcd\xeb\x63\xbb\x17\x6b\x49\x7b\xd1\x39\x26\xb8\xe6\x80\xc4\x64\x94\xe4\xda\x00\x8a\xa9\xf6\xf8\xeb\x3f\xfd\x6f\xbe\x0b\xa9\xf6\xf8\xe0\xde\xe4\xb3\x6b\xcb\x12\xee\x2c\xc8\x60\xfc\x4c\xf8\xdc\x17\x89\x73\x69\xe8\x2f\x69\x17\x7d\x0a\x68\x27\xaf\x58\x36\x73\x66\x20\x87\xcc\xbb\xac\x80\xcf\xa3\x5e\x1f\x8f\x44\x96\x7b\x72\xec\x05\x86\x85\xe4\x84\x0e\x8c\x67\xc0\x15\xb1\xad\xaa\x10\xc5\xbf\xf5\x85\x7f\xf3\x6a\x55\xa2\x98\xdb\xea\x85\x64\x89\xb9\xad\x5e\x52\x24\xfa\xfc\x6f\x29\x12\x6b\xc4\xc4\x11\x1e\x2b\xba\x4c\xf7\x63\x84\x76\x43\x80\x31\x85\x32\x80\xa7\xd0\x0c\xa0\xca\x4d\x01\x33\x1a\xad\x0f\x92\x34\xe8\x99\x67\xa6\xa0\x62\x87\x12\xf9\x13\x2c\x4f\xb1\x38\x8b\xc5\x75\x19\x8d\xf3\x33\x07\x11\xdb\xba\x04\xb6\x3c\x46\xe4\x71\x4d\x5a\x49\x32\xc4\x33\x82\x00\x66\xa8\x58\x86\x26\x1d\x90\x0d\xbd\x35\x37\x91\x5c\x31\xc8\xda\x2c\x0a\xed\x6e\x6e\xcd\x5a\xa8\x3b\x56\xf0\x58\x11\x67\x01\xb8\x14\xa9\xfb\x8c\xbb\x38\x88\x09\xa1\xf2\xad\x37\xf3\x1d\xd6\x94\x2b\xed\x71\x62\x5f\xba\x30\x2c\xbd\xdd\xc3\x63\xe0\x96\x3d\x22\x40\xa5\x45\xbc\x6a\x08\x82\x6a\xbd\xf0\x4c\x0a\x36\x67\xc4\x17\x2a\x9b\x3e\x49\x0d\x35\x9b\x0b\x71\x0c\xe3\xfb\xe2\xd1\x83\x4f\x8e\x1e\xfc\xe6\x1f\xee\x3f\xb9\x79\xf8\xe8\xce\xe7\x61\x4b\x7a\x74\x7f\x3f\x1c\x0f\xfb\xd4\x3f\x7f\xed\xf9\xf7\x3e\x9d\xfc\x78\xd7\xbf\xb1\x37\xd9\xff\xc3\xdf\xbb\xe6\xdf\xf8\xdd\xff\xe5\x4e\xbc\xd1\xbf\x7e\x7b\x72\xf7\xcb\x70\x24\xba\x6e\x95\xcd\xba\xa7\x41\x34\x4d\xd9\x2a\x67\x95\x21\x7b\x7e\x02\x46\xa5\xf8\x29\xb2\xae\x40\x2e\x3e\xb7\x47\x80\x6d\x9b\x29\x9a\xed\xbe\xa5\xf2\xd8\x66\x84\x5a\x32\x5d\xdb\x97\xc0\x16\xf5\x85\x5c\xd3\x23\x22\x0a\x21\x61\xce\x71\xba\x45\x1a\x44\x82\x9b\x95\x46\x25\x71\x98\x43\xe6\xe5\xd2\x2a\xd5\xee\x97\x08\x7c\x52\x01\x3d\xb7\x51\x0f\x77\xfc\x77\xa7\x1c\x6b\xda\xca\xc7\x9b\x8c\xd1\x0a\xc7\x2a\x86\xcc\xb3\xf2\x0b\xf0\x3a\x3d\x1f\x32\x6f\xd5\xfc\x0a\x0c\x9d\x65\xcc\x11\x2b\xf9\xbf\xad\x96\x2b\x79\xc9\xbe\xc9\xb5\x28\xac\xb0\x11\xbb\x25\x4a\xcc\xf2\xf2\x21\x12\xd4\x4b\xc3\xe1\xe0\x28\x7b\x29\xf1\x50\x36\x3c\xa6\x0d\x14\x36\x93\xef\x6e\xab\x84\x48\x32\x0e\x16\x49\x5b\x41\xa5\xeb\x99\xde\x1d\x40\x28\x23\x10\x26\xdf\x1e\x1c\x3d\xfc\xde\xbf\x7b\x38\xb9\x7d\x70\xf4\xf7\x4f\x93\xab\x07\xf3\x7a\x7b\x36\x97\x57\xe5\xe1\x1a\x24\xe5\x1a\x7b\xd2\x20\xc3\x3d\xb4\xe6\xa2\x11\x72\x3d\xbf\x5e\x24\x60\x09\x9d\x73\x95\xd3\x25\x93\xb6\x65\x72\xc6\xbf\xb1\x17\xea\xc7\x27\xfb\xbf\xfa\x87\xfb\xb1\xae\x5c\x9c\x39\xe9\x17\x29\xcb\xa6\x4c\x68\xb1\x6a\xf1\x7a\x9e\xa2\x57\xa2\x9c\x4c\x2f\x8a\x95\x6e\xcd\x66\xaf\xd1\x68\x9a\x66\xf2\xe6\xdc\xec\x74\xda\x9d\xf4\x55\xba\xd9\xb1\x5a\xed\xae\xd5\x7c\x7f\xd3\xec\xce\xcc\xcc\x8c\x5e\x68\x76\x1a\xe7\xea\xad\x6e\xfe\x9e\x78\x76\x66\xc6\x3c\xd7\x7e\x2f\x7f\x4f\x30\x33\x3b\x7a\xbe\x57\xb0\xfc\x7c\x2f\x7f\xb0\x7e\xa1\xdd\x9b\xe2\x6a\xb5\x7b\x67\xcf\x25\x17\x74\x3b\xf5\x96\x59\x6f\x74\x37\xdb\x2d\xeb\x9d\xfa\xe6\xbb\xcd\xf9\x2f\x10\xa6\x27\x37\x27\x32\x59\xc1\xf8\xcc\x32\xda\x05\x6e\x0f\x71\x35\xe9\xae\x6f\xde\x16\x5c\xf1\x08\xaf\xf4\x68\xca\x24\xe9\x8f\x2d\xc5\x0b\x45\xd4\x1a\xaf\xef\xd5\xaf\xcf\x5d\x8e\x1d\x08\x88\x59\x78\x87\x9e\x17\xf8\xb8\xb3\xae\x10\xf2\x35\xb4\xbc\xaa\x32\x08\x73\xc0\x95\x93\x0f\x3b\x0e\x07\x51\x58\x50\x0b\x15\xd4\x6c\x3b\x09\xbb\xc8\x62\xf1\x31\x13\xbc\x15\xa2\xe0\x32\x0a\xe3\xd5\xd4\x5f\xf0\x7b\xfa\x96\xea\xd7\xe9\x78\x15\x24\x7a\x7d\x55\x1e\xed\xe0\x91\x5a\x14\xbc\x82\x74\xda\x1a\x4b\x58\xe4\x61\xea\x9d\xf8\x0a\x2e\x42\xc6\x40\x69\xff\xe6\xe5\x26\xa1\x12\x06\xa9\x5f\xef\xb3\x74\x79\xe3\x54\x51\xd9\x14\x02\x0f\x2a\xbe\x77\xd4\x89\xb7\x36\x15\x91\x4c\xa9\x32\xc2\xa1\xa6\xff\x76\x6b\xff\x06\x00\x00\xff\xff\x51\x34\x52\xed\x45\x22\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
