syntax = "proto3";

package order_business;

import "gitee.com/kelvins-io/common/proto/google/api/annotations.proto";


// 订单服务
service OrderBusinessService {

    // 生成唯一订单事务号
    rpc GenOrderTxCode(GenOrderTxCodeRequest) returns (GenOrderTxCodeResponse) {
        option (google.api.http) = {
            get: "/v1/order/code"
        };
    }
    // 检查外部订单号是否存在
    rpc CheckOrderExist(CheckOrderExistRequest) returns (CheckOrderExistResponse) {
        option (google.api.http) = {
            get: "/v1/order/code/exist"
        };
    }
    // 创建订单
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/v1/order/create"
            body:"*"
        };
    }
    // 获取订单详情
    rpc GetOrderDetail(GetOrderDetailRequest) returns (GetOrderDetailResponse) {
        option (google.api.http) = {
            get: "/v1/order/detail"
        };
    }
    // 获取订单商品
    rpc GetOrderSku(GetOrderSkuRequest) returns (GetOrderSkuResponse) {
        option (google.api.http) = {
            get: "/v1/order/sku"
        };
    }
    // 更新订单状态
    rpc UpdateOrderState(UpdateOrderStateRequest) returns (UpdateOrderStateResponse) {
        option (google.api.http) = {
            post: "/v1/order/state"
            body:"*"
        };
    }
    // 订单支付通知
    rpc OrderTradeNotice(OrderTradeNoticeRequest) returns (OrderTradeNoticeResponse) {
        option (google.api.http) = {
            post: "/v1/order/notice"
            body:"*"
        };
    }
    // 订单状态检查
    rpc CheckOrderState(CheckOrderStateRequest) returns (CheckOrderStateResponse) {
        option (google.api.http) = {
            post: "/v1/order/check"
            body:"*"
        };
    }
    // 获取订单
    rpc FindOrderList(FindOrderListRequest) returns (FindOrderListResponse) {
        option (google.api.http) = {
            get: "/v1/order/list"
        };
    }
    // 店铺订单存在检查
    rpc InspectShopOrder(InspectShopOrderRequest) returns (InspectShopOrderResponse) {
        option (google.api.http) = {
            get: "/v1/order/shop/inspect"
        };
    }
}

enum RetCode {
    SUCCESS = 0;
    ERROR = 500;
    ERR_REQUEST_DATA_FORMAT = 40000;
    USER_NOT_EXIST = 50001;
    USER_EXIST = 50002;
    MERCHANT_NOT_EXIST = 50003;
    MERCHANT_EXIST = 50004;
    SHOP_NOT_EXIST = 50005;
    SHOP_EXIST = 50006;
    SKU_NOT_EXIST = 50007;
    SKU_EXIST = 50008;
    SKU_AMOUNT_NOT_ENOUGH = 50009;
    TRANSACTION_FAILED = 50010;
    ORDER_NOT_EXIST = 50011;
    ORDER_EXIST = 50012;
    ORDER_STATE_PROHIBIT = 50013; // 订单状态不允许修改
    ORDER_STATE_LOCKED = 50014; // 订单处于锁定状态
    OPERATION_NOT_EFFECT = 50015; // 操作未生效
    ORDER_TX_CODE_EMPTY = 50016; // 订单事务号为空
    ORDER_DELIVERY_NOT_EXIST = 50017; // 订单交付信息不存在
    ORDER_TX_CODE_NOT_EXIST = 50018; // 订单交易号不存在
    SKU_PRICE_VERSION_NOT_EXIST = 50019; // 商品价格版本不存在或不符合规则
    ORDER_PAY_COMPLETED = 50020; // 订单支付完成
    ORDER_EXPIRE = 50021; // 订单过期
    ORDER_STATE_INVALID = 50022; // 订单无效
    REQUEST_DATA_TOO_MUCH = 50023; // 请求数据太多
}

enum OperationType {
    CREATE = 0;
    UPDATE = 1;
    DELETE = 2;
    AUDIT = 3;
    PUT_AWAY = 4;
}

enum CoinType {
    CNY = 0;
    USD = 1;
}

enum AccountState {
    NORMAL = 0;
    LOCK = 1;
    INVALID = 2;
}

enum AccountType {
    PERSONAL = 0;
    COMPANY = 1;
    SYSTEM = 2;
}

message CommonResponse {
    RetCode code = 1;
    string msg = 2;
}

enum OrderStateType {
    ORDER_EFFECTIVE = 0; // 有效
    ORDER_LOCKED = 1; // 锁定中
    ORDER_INVALID = 2; // 无效
}

enum OrderPayStateType {
    PAY_READY = 0; // 支付就绪，未支付
    PAY_RUN = 1; // 正在支付中
    PAY_FAILED = 2; // 支付失败
    PAY_SUCCESS = 3; // 支付成功
    PAY_CANCEL = 4; // 支付取消
}

message OperationMeta {
    int64 op_uid = 1;
    string op_ip = 2;
    string op_platform = 3; // 操作平台
    string op_device = 4; // 操作设备
}

message PageMeta {
    int32 page_num = 1;
    int32 page_size = 2;
}

message FiltrateTimeMeta {
    string start_time = 1;
    string end_time = 2;
}

message OrderStateEntry {
    string order_code = 1;
    OrderStateType state = 2;
    OrderPayStateType pay_state = 3;
}

message UpdateOrderStateRequest {
    repeated OrderStateEntry entry_list = 1;
    OperationMeta operation_meta = 2;
}

message CheckOrderStateRequest {
    repeated string order_codes = 1;
}

message OrderState {
    string order_code = 1;
    OrderPayStateType pay_state = 2;
    OrderStateType state = 3;
    bool is_exist = 4;
}

message CheckOrderStateResponse {
    CommonResponse common = 1;
    repeated OrderState list = 2;
}

message InspectShopOrderRequest {
    int64 uid = 1;
    int64 shop_id = 2;
    string order_code = 3;
}

message InspectShopOrderResponse {
    CommonResponse common = 1;
}

message FindOrderListRequest {
    repeated int64 shop_id_list = 1; // 店铺ID，用户ID不能都为空
    repeated int64 uid_list = 2; // 用户ID，店铺ID不能都为空
    FiltrateTimeMeta time_meta = 198; // 时间参数
    PageMeta page_meta = 199; // 分页
}

message OrderListEntry {
    string order_code = 1;
    int64 uid = 2;
    int64 shop_id = 3;
    string description = 4;
    string client_ip = 5;
    string device_code = 6;
    OrderStateType state = 7;
    OrderPayStateType pay_state = 8;
    string money = 9;
    string create_time = 10;
}

message FindOrderListResponse {
    CommonResponse common = 1;
    repeated OrderListEntry list = 2;
    int64 total = 3; // 当前条件下订单总数
}

message OrderTradeNoticeRequest {
    int64 uid = 1;
    string order_tx_code = 2; // 订单交易号
    string pay_id = 3; // 支付ID（支付后产生）
}

message OrderTradeNoticeResponse {
    CommonResponse common = 1;
}

message UpdateOrderStateResponse {
    CommonResponse common = 1;
}

message GetOrderSkuRequest {
    string tx_code = 1;
}

message GetOrderSkuResponse {
    CommonResponse common = 1;
    repeated OrderSku order_list = 2;
}

message OrderSku {
    string order_code = 1;
    repeated OrderGoods goods = 2; // 商品列表
}

message GetOrderDetailRequest {
    string tx_code = 1;
}

message ShopOrderDetail {
    string order_code  = 1;
    string merchant = 2; // 店铺商户,店铺主体
    string time_expire = 3; // 订单有效期
    string notify_url = 4; // 订单支付成功通知
    string description = 5; // 订单描述
    TradeGoodsDetail detail = 199;
}

message GetOrderDetailResponse {
    CommonResponse common = 1;
    string account = 4; // 订单涉及的用户
    CoinType coin_type = 2; // 币种
    repeated ShopOrderDetail list = 90;
}

message TradeGoodsDetail {
    string money = 1; // 需要支付金额
}

message OrderDetail {
    repeated OrderShopDetail shop_detail = 1;
}

// 同一个门店的商品
message OrderShopDetail {
    int64 shop_id = 1;
    CoinType coin_type = 6; // 同一个店铺使用一种币结算
    repeated OrderGoods goods = 7; // 商品列表
    OrderSceneInfo scene_info = 199; // 场景
}

message OrderGoods {
    string sku_code = 2;
    string price = 3;
    int64 amount = 4;
    string name = 5;
    string reduction = 6;
    int64 version = 7; // 商品价格版本，应对商品价格调整
}

// 一个店铺的商品算一个订单，如果同时包含多个店铺则有多个订单
message CreateOrderRequest {
    int64 uid = 1;
    string time = 2;
    string description = 3; // 订单描述
    string payer_client_ip = 4; // 用户终端IP
    string device_id = 5; // 用户设备号

    string order_tx_code = 298;
    OrderDetail detail = 299;
    OrderDeliveryInfo delivery_info = 300; // 订单交付信息
}

message OrderDeliveryInfo {
    int32 user_delivery_id = 1; // 用户收货地址
}

// 支付场景信息
message OrderSceneInfo {
    StoreInfo store_info = 999;
}

// 门店信息
message StoreInfo {
    int64 id = 1; // 门店编号
    string name = 2; // 门店名称
    string area_code = 3; // 地区编码
    string address = 4; // 详细地址
}

message OrderEntry {
    string order_code = 10; // 订单号
    string time_expire = 11; // 订单有效时间
}

message CreateOrderResponse {
    CommonResponse common = 1;
    string tx_code = 2;
}

message CheckOrderExistRequest {
    int64 uid = 1;
    string order_tx_code = 2;
}

message CheckOrderExistResponse {
    CommonResponse common = 1;
    bool is_exist = 2;
}

message GenOrderTxCodeRequest {
    int64 uid = 1;
}

message GenOrderTxCodeResponse {
    CommonResponse common = 1;
    string order_tx_code = 2;
}