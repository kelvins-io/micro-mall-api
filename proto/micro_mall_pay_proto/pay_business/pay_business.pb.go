// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.5.1
// source: proto/micro_mall_pay_proto/pay_business/pay_business.proto

package pay_business

import (
	context "context"
	_ "gitee.com/kelvins-io/common/proto/google/api"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RetCode int32

const (
	RetCode_SUCCESS                     RetCode = 0
	RetCode_ERROR                       RetCode = 500
	RetCode_USER_NOT_EXIST              RetCode = 50001
	RetCode_USER_EXIST                  RetCode = 50002
	RetCode_MERCHANT_NOT_EXIST          RetCode = 50003
	RetCode_MERCHANT_EXIST              RetCode = 50004
	RetCode_SHOP_NOT_EXIST              RetCode = 50005
	RetCode_SHOP_EXIST                  RetCode = 50006
	RetCode_SKU_NOT_EXIST               RetCode = 50007
	RetCode_SKU_EXIST                   RetCode = 50008
	RetCode_SKU_AMOUNT_NOT_ENOUGH       RetCode = 50009
	RetCode_USER_BALANCE_NOT_ENOUGH     RetCode = 600000
	RetCode_MERCHANT_BALANCE_NOT_ENOUGH RetCode = 6000001
	RetCode_ACCOUNT_LOCK                RetCode = 6000002
	RetCode_MERCHANT_ACCOUNT_NOT_EXIST  RetCode = 6000003
	RetCode_MERCHANT_ACCOUNT_STATE_LOCK RetCode = 6000004
	RetCode_USER_ACCOUNT_NOT_EXIST      RetCode = 6000005
	RetCode_USER_ACCOUNT_STATE_LOCK     RetCode = 6000006
	RetCode_DECIMAL_PARSE_ERR           RetCode = 6000007
	RetCode_TRANSACTION_FAILED          RetCode = 6000008
	RetCode_ACCOUNT_EXIST               RetCode = 6000009
	RetCode_TRADE_PAY_RUN               RetCode = 6000010
	RetCode_TRADE_PAY_SUCCESS           RetCode = 6000011
	RetCode_TRADE_PAY_EXPIRE            RetCode = 6000012
	RetCode_TRADE_ORDER_NOT_MATCH_USER  RetCode = 6000013
	RetCode_USER_ACCOUNT_STATE_INVALID  RetCode = 6000014
	RetCode_USER_CHARGE_RECORD_EXIST    RetCode = 6000015
	RetCode_TRADE_UUID_EMPTY            RetCode = 6000016
)

// Enum value maps for RetCode.
var (
	RetCode_name = map[int32]string{
		0:       "SUCCESS",
		500:     "ERROR",
		50001:   "USER_NOT_EXIST",
		50002:   "USER_EXIST",
		50003:   "MERCHANT_NOT_EXIST",
		50004:   "MERCHANT_EXIST",
		50005:   "SHOP_NOT_EXIST",
		50006:   "SHOP_EXIST",
		50007:   "SKU_NOT_EXIST",
		50008:   "SKU_EXIST",
		50009:   "SKU_AMOUNT_NOT_ENOUGH",
		600000:  "USER_BALANCE_NOT_ENOUGH",
		6000001: "MERCHANT_BALANCE_NOT_ENOUGH",
		6000002: "ACCOUNT_LOCK",
		6000003: "MERCHANT_ACCOUNT_NOT_EXIST",
		6000004: "MERCHANT_ACCOUNT_STATE_LOCK",
		6000005: "USER_ACCOUNT_NOT_EXIST",
		6000006: "USER_ACCOUNT_STATE_LOCK",
		6000007: "DECIMAL_PARSE_ERR",
		6000008: "TRANSACTION_FAILED",
		6000009: "ACCOUNT_EXIST",
		6000010: "TRADE_PAY_RUN",
		6000011: "TRADE_PAY_SUCCESS",
		6000012: "TRADE_PAY_EXPIRE",
		6000013: "TRADE_ORDER_NOT_MATCH_USER",
		6000014: "USER_ACCOUNT_STATE_INVALID",
		6000015: "USER_CHARGE_RECORD_EXIST",
		6000016: "TRADE_UUID_EMPTY",
	}
	RetCode_value = map[string]int32{
		"SUCCESS":                     0,
		"ERROR":                       500,
		"USER_NOT_EXIST":              50001,
		"USER_EXIST":                  50002,
		"MERCHANT_NOT_EXIST":          50003,
		"MERCHANT_EXIST":              50004,
		"SHOP_NOT_EXIST":              50005,
		"SHOP_EXIST":                  50006,
		"SKU_NOT_EXIST":               50007,
		"SKU_EXIST":                   50008,
		"SKU_AMOUNT_NOT_ENOUGH":       50009,
		"USER_BALANCE_NOT_ENOUGH":     600000,
		"MERCHANT_BALANCE_NOT_ENOUGH": 6000001,
		"ACCOUNT_LOCK":                6000002,
		"MERCHANT_ACCOUNT_NOT_EXIST":  6000003,
		"MERCHANT_ACCOUNT_STATE_LOCK": 6000004,
		"USER_ACCOUNT_NOT_EXIST":      6000005,
		"USER_ACCOUNT_STATE_LOCK":     6000006,
		"DECIMAL_PARSE_ERR":           6000007,
		"TRANSACTION_FAILED":          6000008,
		"ACCOUNT_EXIST":               6000009,
		"TRADE_PAY_RUN":               6000010,
		"TRADE_PAY_SUCCESS":           6000011,
		"TRADE_PAY_EXPIRE":            6000012,
		"TRADE_ORDER_NOT_MATCH_USER":  6000013,
		"USER_ACCOUNT_STATE_INVALID":  6000014,
		"USER_CHARGE_RECORD_EXIST":    6000015,
		"TRADE_UUID_EMPTY":            6000016,
	}
)

func (x RetCode) Enum() *RetCode {
	p := new(RetCode)
	*p = x
	return p
}

func (x RetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[0].Descriptor()
}

func (RetCode) Type() protoreflect.EnumType {
	return &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[0]
}

func (x RetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetCode.Descriptor instead.
func (RetCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{0}
}

type OperationType int32

const (
	OperationType_CREATE   OperationType = 0
	OperationType_UPDATE   OperationType = 1
	OperationType_DELETE   OperationType = 2
	OperationType_AUDIT    OperationType = 3
	OperationType_PUT_AWAY OperationType = 4
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "DELETE",
		3: "AUDIT",
		4: "PUT_AWAY",
	}
	OperationType_value = map[string]int32{
		"CREATE":   0,
		"UPDATE":   1,
		"DELETE":   2,
		"AUDIT":    3,
		"PUT_AWAY": 4,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[1].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[1]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{1}
}

type CoinType int32

const (
	CoinType_CNY CoinType = 0
	CoinType_USD CoinType = 1
)

// Enum value maps for CoinType.
var (
	CoinType_name = map[int32]string{
		0: "CNY",
		1: "USD",
	}
	CoinType_value = map[string]int32{
		"CNY": 0,
		"USD": 1,
	}
)

func (x CoinType) Enum() *CoinType {
	p := new(CoinType)
	*p = x
	return p
}

func (x CoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[2].Descriptor()
}

func (CoinType) Type() protoreflect.EnumType {
	return &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[2]
}

func (x CoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinType.Descriptor instead.
func (CoinType) EnumDescriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{2}
}

type AccountType int32

const (
	AccountType_Person  AccountType = 0
	AccountType_Company AccountType = 1
	AccountType_System  AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "Person",
		1: "Company",
		2: "System",
	}
	AccountType_value = map[string]int32{
		"Person":  0,
		"Company": 1,
		"System":  2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[3].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[3]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{3}
}

type TradeType int32

const (
	TradeType_PAY    TradeType = 0
	TradeType_CHARGE TradeType = 1
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "PAY",
		1: "CHARGE",
	}
	TradeType_value = map[string]int32{
		"PAY":    0,
		"CHARGE": 1,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[4].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes[4]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{4}
}

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code RetCode `protobuf:"varint,1,opt,name=code,proto3,enum=pay_business.RetCode" json:"code,omitempty"`
	Msg  string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResponse) GetCode() RetCode {
	if x != nil {
		return x.Code
	}
	return RetCode_SUCCESS
}

func (x *CommonResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FindAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       []string    `protobuf:"bytes,1,rep,name=owner,proto3" json:"owner,omitempty"`                                                               // 必填
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=pay_business.AccountType" json:"account_type,omitempty"` // 选填
	CoinType    CoinType    `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=pay_business.CoinType" json:"coin_type,omitempty"`             // 选填
}

func (x *FindAccountRequest) Reset() {
	*x = FindAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAccountRequest) ProtoMessage() {}

func (x *FindAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAccountRequest.ProtoReflect.Descriptor instead.
func (*FindAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{1}
}

func (x *FindAccountRequest) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *FindAccountRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_Person
}

func (x *FindAccountRequest) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CNY
}

type FindAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common    *CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	EntryList []*AccountEntry `protobuf:"bytes,2,rep,name=entry_list,json=entryList,proto3" json:"entry_list,omitempty"`
}

func (x *FindAccountResponse) Reset() {
	*x = FindAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAccountResponse) ProtoMessage() {}

func (x *FindAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAccountResponse.ProtoReflect.Descriptor instead.
func (*FindAccountResponse) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{2}
}

func (x *FindAccountResponse) GetCommon() *CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *FindAccountResponse) GetEntryList() []*AccountEntry {
	if x != nil {
		return x.EntryList
	}
	return nil
}

type AccountChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       []string       `protobuf:"bytes,1,rep,name=owner,proto3" json:"owner,omitempty"`                                                               // 必填
	AccountType AccountType    `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=pay_business.AccountType" json:"account_type,omitempty"` // 选填
	CoinType    CoinType       `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=pay_business.CoinType" json:"coin_type,omitempty"`             // 选填
	Amount      string         `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`                                                             // 数量
	OutTradeNo  string         `protobuf:"bytes,5,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	OpMeta      *OperationMeta `protobuf:"bytes,199,opt,name=op_meta,json=opMeta,proto3" json:"op_meta,omitempty"`
}

func (x *AccountChargeRequest) Reset() {
	*x = AccountChargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChargeRequest) ProtoMessage() {}

func (x *AccountChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChargeRequest.ProtoReflect.Descriptor instead.
func (*AccountChargeRequest) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{3}
}

func (x *AccountChargeRequest) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AccountChargeRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_Person
}

func (x *AccountChargeRequest) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CNY
}

func (x *AccountChargeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AccountChargeRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *AccountChargeRequest) GetOpMeta() *OperationMeta {
	if x != nil {
		return x.OpMeta
	}
	return nil
}

type AccountChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"` // 全部充值成功或失败
}

func (x *AccountChargeResponse) Reset() {
	*x = AccountChargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChargeResponse) ProtoMessage() {}

func (x *AccountChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChargeResponse.ProtoReflect.Descriptor instead.
func (*AccountChargeResponse) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{4}
}

func (x *AccountChargeResponse) GetCommon() *CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

type GetTradeUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeType TradeType `protobuf:"varint,1,opt,name=trade_type,json=tradeType,proto3,enum=pay_business.TradeType" json:"trade_type,omitempty"`
	ClientId  string    `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Uid       int64     `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetTradeUUIDRequest) Reset() {
	*x = GetTradeUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradeUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeUUIDRequest) ProtoMessage() {}

func (x *GetTradeUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeUUIDRequest.ProtoReflect.Descriptor instead.
func (*GetTradeUUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{5}
}

func (x *GetTradeUUIDRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_PAY
}

func (x *GetTradeUUIDRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetTradeUUIDRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetTradeUUIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Uuid   string          `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetTradeUUIDResponse) Reset() {
	*x = GetTradeUUIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradeUUIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeUUIDResponse) ProtoMessage() {}

func (x *GetTradeUUIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeUUIDResponse.ProtoReflect.Descriptor instead.
func (*GetTradeUUIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{6}
}

func (x *GetTradeUUIDResponse) GetCommon() *CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *GetTradeUUIDResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type AccountEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       string      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=pay_business.AccountType" json:"account_type,omitempty"`
	CoinType    CoinType    `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=pay_business.CoinType" json:"coin_type,omitempty"`
	Balance     string      `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AccountEntry) Reset() {
	*x = AccountEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountEntry) ProtoMessage() {}

func (x *AccountEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountEntry.ProtoReflect.Descriptor instead.
func (*AccountEntry) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{7}
}

func (x *AccountEntry) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AccountEntry) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_Person
}

func (x *AccountEntry) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CNY
}

func (x *AccountEntry) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       string      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=pay_business.AccountType" json:"account_type,omitempty"`
	CoinType    CoinType    `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=pay_business.CoinType" json:"coin_type,omitempty"`
	Balance     string      `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAccountRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *CreateAccountRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_Person
}

func (x *CreateAccountRequest) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CNY
}

func (x *CreateAccountRequest) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type CreateAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	AccountCode string          `protobuf:"bytes,2,opt,name=account_code,json=accountCode,proto3" json:"account_code,omitempty"`
}

func (x *CreateAccountResponse) Reset() {
	*x = CreateAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountResponse) ProtoMessage() {}

func (x *CreateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{9}
}

func (x *CreateAccountResponse) GetCommon() *CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CreateAccountResponse) GetAccountCode() string {
	if x != nil {
		return x.AccountCode
	}
	return ""
}

type TradePayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string           `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                                               // 用户code
	CoinType  CoinType         `protobuf:"varint,2,opt,name=coin_type,json=coinType,proto3,enum=pay_business.CoinType" json:"coin_type,omitempty"` // 币种
	EntryList []*TradePayEntry `protobuf:"bytes,11,rep,name=entry_list,json=entryList,proto3" json:"entry_list,omitempty"`                         // 可以同时支付多个订单
	OpUid     int64            `protobuf:"varint,12,opt,name=op_uid,json=opUid,proto3" json:"op_uid,omitempty"`
	OpIp      string           `protobuf:"bytes,13,opt,name=op_ip,json=opIp,proto3" json:"op_ip,omitempty"`
	OutTxCode string           `protobuf:"bytes,15,opt,name=out_tx_code,json=outTxCode,proto3" json:"out_tx_code,omitempty"` // 外部交易号，如果只有一个订单则等于外部订单号
}

func (x *TradePayRequest) Reset() {
	*x = TradePayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePayRequest) ProtoMessage() {}

func (x *TradePayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePayRequest.ProtoReflect.Descriptor instead.
func (*TradePayRequest) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{10}
}

func (x *TradePayRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TradePayRequest) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CNY
}

func (x *TradePayRequest) GetEntryList() []*TradePayEntry {
	if x != nil {
		return x.EntryList
	}
	return nil
}

func (x *TradePayRequest) GetOpUid() int64 {
	if x != nil {
		return x.OpUid
	}
	return 0
}

func (x *TradePayRequest) GetOpIp() string {
	if x != nil {
		return x.OpIp
	}
	return ""
}

func (x *TradePayRequest) GetOutTxCode() string {
	if x != nil {
		return x.OutTxCode
	}
	return ""
}

type TradePayEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo  string            `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"` // 外部订单号
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                   // 商品描述
	Merchant    string            `protobuf:"bytes,3,opt,name=merchant,proto3" json:"merchant,omitempty"`                         // 店铺
	Attach      string            `protobuf:"bytes,4,opt,name=attach,proto3" json:"attach,omitempty"`                             // 附加数据，在支付和查询body中原样返回
	Detail      *TradeGoodsDetail `protobuf:"bytes,199,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *TradePayEntry) Reset() {
	*x = TradePayEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePayEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePayEntry) ProtoMessage() {}

func (x *TradePayEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePayEntry.ProtoReflect.Descriptor instead.
func (*TradePayEntry) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{11}
}

func (x *TradePayEntry) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *TradePayEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TradePayEntry) GetMerchant() string {
	if x != nil {
		return x.Merchant
	}
	return ""
}

func (x *TradePayEntry) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *TradePayEntry) GetDetail() *TradeGoodsDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type OperationMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUid      int64  `protobuf:"varint,1,opt,name=op_uid,json=opUid,proto3" json:"op_uid,omitempty"`
	OpIp       string `protobuf:"bytes,2,opt,name=op_ip,json=opIp,proto3" json:"op_ip,omitempty"`
	OpPlatform string `protobuf:"bytes,3,opt,name=op_platform,json=opPlatform,proto3" json:"op_platform,omitempty"` // 操作平台
	OpDevice   string `protobuf:"bytes,4,opt,name=op_device,json=opDevice,proto3" json:"op_device,omitempty"`       // 操作设备
}

func (x *OperationMeta) Reset() {
	*x = OperationMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMeta) ProtoMessage() {}

func (x *OperationMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMeta.ProtoReflect.Descriptor instead.
func (*OperationMeta) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{12}
}

func (x *OperationMeta) GetOpUid() int64 {
	if x != nil {
		return x.OpUid
	}
	return 0
}

func (x *OperationMeta) GetOpIp() string {
	if x != nil {
		return x.OpIp
	}
	return ""
}

func (x *OperationMeta) GetOpPlatform() string {
	if x != nil {
		return x.OpPlatform
	}
	return ""
}

func (x *OperationMeta) GetOpDevice() string {
	if x != nil {
		return x.OpDevice
	}
	return ""
}

type TradeGoodsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`       // 需要支付数量
	Reduction string `protobuf:"bytes,2,opt,name=reduction,proto3" json:"reduction,omitempty"` // 满减
}

func (x *TradeGoodsDetail) Reset() {
	*x = TradeGoodsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeGoodsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeGoodsDetail) ProtoMessage() {}

func (x *TradeGoodsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeGoodsDetail.ProtoReflect.Descriptor instead.
func (*TradeGoodsDetail) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{13}
}

func (x *TradeGoodsDetail) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TradeGoodsDetail) GetReduction() string {
	if x != nil {
		return x.Reduction
	}
	return ""
}

type TradePayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *CommonResponse `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	TradeId string          `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"` // 支付ID，客户端需要存储
}

func (x *TradePayResponse) Reset() {
	*x = TradePayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePayResponse) ProtoMessage() {}

func (x *TradePayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePayResponse.ProtoReflect.Descriptor instead.
func (*TradePayResponse) Descriptor() ([]byte, []int) {
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP(), []int{14}
}

func (x *TradePayResponse) GetCommon() *CommonResponse {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TradePayResponse) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

var File_proto_micro_mall_pay_proto_pay_business_pay_business_proto protoreflect.FileDescriptor

var file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x61,
	0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x3e, 0x67, 0x69, 0x74, 0x65,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6c, 0x76, 0x69, 0x6e, 0x73, 0x2d, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61,
	0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x35,
	0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x6f,
	0x70, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x70, 0x55, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x6f, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x49,
	0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x54, 0x78, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0x79, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x70, 0x55, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x6f, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x49,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x48, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x2a, 0xd7,
	0x05, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xf4, 0x03, 0x12, 0x14, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd1, 0x86, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd2, 0x86, 0x03, 0x12, 0x18, 0x0a, 0x12, 0x4d,
	0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0xd3, 0x86, 0x03, 0x12, 0x14, 0x0a, 0x0e, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd4, 0x86, 0x03, 0x12, 0x14, 0x0a, 0x0e, 0x53,
	0x48, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd5, 0x86,
	0x03, 0x12, 0x10, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0xd6, 0x86, 0x03, 0x12, 0x13, 0x0a, 0x0d, 0x53, 0x4b, 0x55, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0xd7, 0x86, 0x03, 0x12, 0x0f, 0x0a, 0x09, 0x53, 0x4b, 0x55, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd8, 0x86, 0x03, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x4b, 0x55,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55,
	0x47, 0x48, 0x10, 0xd9, 0x86, 0x03, 0x12, 0x1d, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47,
	0x48, 0x10, 0xc0, 0xcf, 0x24, 0x12, 0x22, 0x0a, 0x1b, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x4f, 0x55, 0x47, 0x48, 0x10, 0x81, 0x9b, 0xee, 0x02, 0x12, 0x13, 0x0a, 0x0c, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x82, 0x9b, 0xee, 0x02, 0x12, 0x21,
	0x0a, 0x1a, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x83, 0x9b, 0xee,
	0x02, 0x12, 0x22, 0x0a, 0x1b, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x84, 0x9b, 0xee, 0x02, 0x12, 0x1d, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x85, 0x9b, 0xee, 0x02, 0x12, 0x1e, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x86, 0x9b, 0xee, 0x02, 0x12, 0x18, 0x0a, 0x11, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x87, 0x9b, 0xee, 0x02, 0x12, 0x19,
	0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x88, 0x9b, 0xee, 0x02, 0x12, 0x14, 0x0a, 0x0d, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x89, 0x9b, 0xee, 0x02, 0x12,
	0x14, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x52, 0x55, 0x4e,
	0x10, 0x8a, 0x9b, 0xee, 0x02, 0x12, 0x18, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x8b, 0x9b, 0xee, 0x02, 0x12,
	0x17, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x10, 0x8c, 0x9b, 0xee, 0x02, 0x12, 0x21, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x8d, 0x9b, 0xee, 0x02, 0x12, 0x21, 0x0a, 0x1a, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x8e, 0x9b, 0xee, 0x02, 0x12, 0x1f,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x8f, 0x9b, 0xee, 0x02, 0x12,
	0x17, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x90, 0x9b, 0xee, 0x02, 0x2a, 0x4c, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x55, 0x54, 0x5f,
	0x41, 0x57, 0x41, 0x59, 0x10, 0x04, 0x2a, 0x1c, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x53, 0x44, 0x10, 0x01, 0x2a, 0x32, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x32, 0xc1, 0x04, 0x0a, 0x12, 0x50,
	0x61, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x63, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x12, 0x1d, 0x2e,
	0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f,
	0x70, 0x61, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61,
	0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61,
	0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x6d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x21, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x36,
	0x5a, 0x34, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3b, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescOnce sync.Once
	file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescData = file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDesc
)

func file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescGZIP() []byte {
	file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescOnce.Do(func() {
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescData)
	})
	return file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDescData
}

var file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_goTypes = []interface{}{
	(RetCode)(0),                  // 0: pay_business.RetCode
	(OperationType)(0),            // 1: pay_business.OperationType
	(CoinType)(0),                 // 2: pay_business.CoinType
	(AccountType)(0),              // 3: pay_business.AccountType
	(TradeType)(0),                // 4: pay_business.TradeType
	(*CommonResponse)(nil),        // 5: pay_business.CommonResponse
	(*FindAccountRequest)(nil),    // 6: pay_business.FindAccountRequest
	(*FindAccountResponse)(nil),   // 7: pay_business.FindAccountResponse
	(*AccountChargeRequest)(nil),  // 8: pay_business.AccountChargeRequest
	(*AccountChargeResponse)(nil), // 9: pay_business.AccountChargeResponse
	(*GetTradeUUIDRequest)(nil),   // 10: pay_business.GetTradeUUIDRequest
	(*GetTradeUUIDResponse)(nil),  // 11: pay_business.GetTradeUUIDResponse
	(*AccountEntry)(nil),          // 12: pay_business.AccountEntry
	(*CreateAccountRequest)(nil),  // 13: pay_business.CreateAccountRequest
	(*CreateAccountResponse)(nil), // 14: pay_business.CreateAccountResponse
	(*TradePayRequest)(nil),       // 15: pay_business.TradePayRequest
	(*TradePayEntry)(nil),         // 16: pay_business.TradePayEntry
	(*OperationMeta)(nil),         // 17: pay_business.OperationMeta
	(*TradeGoodsDetail)(nil),      // 18: pay_business.TradeGoodsDetail
	(*TradePayResponse)(nil),      // 19: pay_business.TradePayResponse
}
var file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_depIdxs = []int32{
	0,  // 0: pay_business.CommonResponse.code:type_name -> pay_business.RetCode
	3,  // 1: pay_business.FindAccountRequest.account_type:type_name -> pay_business.AccountType
	2,  // 2: pay_business.FindAccountRequest.coin_type:type_name -> pay_business.CoinType
	5,  // 3: pay_business.FindAccountResponse.common:type_name -> pay_business.CommonResponse
	12, // 4: pay_business.FindAccountResponse.entry_list:type_name -> pay_business.AccountEntry
	3,  // 5: pay_business.AccountChargeRequest.account_type:type_name -> pay_business.AccountType
	2,  // 6: pay_business.AccountChargeRequest.coin_type:type_name -> pay_business.CoinType
	17, // 7: pay_business.AccountChargeRequest.op_meta:type_name -> pay_business.OperationMeta
	5,  // 8: pay_business.AccountChargeResponse.common:type_name -> pay_business.CommonResponse
	4,  // 9: pay_business.GetTradeUUIDRequest.trade_type:type_name -> pay_business.TradeType
	5,  // 10: pay_business.GetTradeUUIDResponse.common:type_name -> pay_business.CommonResponse
	3,  // 11: pay_business.AccountEntry.account_type:type_name -> pay_business.AccountType
	2,  // 12: pay_business.AccountEntry.coin_type:type_name -> pay_business.CoinType
	3,  // 13: pay_business.CreateAccountRequest.account_type:type_name -> pay_business.AccountType
	2,  // 14: pay_business.CreateAccountRequest.coin_type:type_name -> pay_business.CoinType
	5,  // 15: pay_business.CreateAccountResponse.common:type_name -> pay_business.CommonResponse
	2,  // 16: pay_business.TradePayRequest.coin_type:type_name -> pay_business.CoinType
	16, // 17: pay_business.TradePayRequest.entry_list:type_name -> pay_business.TradePayEntry
	18, // 18: pay_business.TradePayEntry.detail:type_name -> pay_business.TradeGoodsDetail
	5,  // 19: pay_business.TradePayResponse.common:type_name -> pay_business.CommonResponse
	15, // 20: pay_business.PayBusinessService.TradePay:input_type -> pay_business.TradePayRequest
	13, // 21: pay_business.PayBusinessService.CreateAccount:input_type -> pay_business.CreateAccountRequest
	6,  // 22: pay_business.PayBusinessService.FindAccount:input_type -> pay_business.FindAccountRequest
	8,  // 23: pay_business.PayBusinessService.AccountCharge:input_type -> pay_business.AccountChargeRequest
	10, // 24: pay_business.PayBusinessService.GetTradeUUID:input_type -> pay_business.GetTradeUUIDRequest
	19, // 25: pay_business.PayBusinessService.TradePay:output_type -> pay_business.TradePayResponse
	14, // 26: pay_business.PayBusinessService.CreateAccount:output_type -> pay_business.CreateAccountResponse
	7,  // 27: pay_business.PayBusinessService.FindAccount:output_type -> pay_business.FindAccountResponse
	9,  // 28: pay_business.PayBusinessService.AccountCharge:output_type -> pay_business.AccountChargeResponse
	11, // 29: pay_business.PayBusinessService.GetTradeUUID:output_type -> pay_business.GetTradeUUIDResponse
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_init() }
func file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_init() {
	if File_proto_micro_mall_pay_proto_pay_business_pay_business_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradeUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradeUUIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePayEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeGoodsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_goTypes,
		DependencyIndexes: file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_depIdxs,
		EnumInfos:         file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_enumTypes,
		MessageInfos:      file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_msgTypes,
	}.Build()
	File_proto_micro_mall_pay_proto_pay_business_pay_business_proto = out.File
	file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_rawDesc = nil
	file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_goTypes = nil
	file_proto_micro_mall_pay_proto_pay_business_pay_business_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PayBusinessServiceClient is the client API for PayBusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PayBusinessServiceClient interface {
	// 统一收单支付
	TradePay(ctx context.Context, in *TradePayRequest, opts ...grpc.CallOption) (*TradePayResponse, error)
	// 创建账户
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// 获取账户
	FindAccount(ctx context.Context, in *FindAccountRequest, opts ...grpc.CallOption) (*FindAccountResponse, error)
	// 账户充值
	AccountCharge(ctx context.Context, in *AccountChargeRequest, opts ...grpc.CallOption) (*AccountChargeResponse, error)
	// 获取交易唯一ID
	GetTradeUUID(ctx context.Context, in *GetTradeUUIDRequest, opts ...grpc.CallOption) (*GetTradeUUIDResponse, error)
}

type payBusinessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayBusinessServiceClient(cc grpc.ClientConnInterface) PayBusinessServiceClient {
	return &payBusinessServiceClient{cc}
}

func (c *payBusinessServiceClient) TradePay(ctx context.Context, in *TradePayRequest, opts ...grpc.CallOption) (*TradePayResponse, error) {
	out := new(TradePayResponse)
	err := c.cc.Invoke(ctx, "/pay_business.PayBusinessService/TradePay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payBusinessServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/pay_business.PayBusinessService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payBusinessServiceClient) FindAccount(ctx context.Context, in *FindAccountRequest, opts ...grpc.CallOption) (*FindAccountResponse, error) {
	out := new(FindAccountResponse)
	err := c.cc.Invoke(ctx, "/pay_business.PayBusinessService/FindAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payBusinessServiceClient) AccountCharge(ctx context.Context, in *AccountChargeRequest, opts ...grpc.CallOption) (*AccountChargeResponse, error) {
	out := new(AccountChargeResponse)
	err := c.cc.Invoke(ctx, "/pay_business.PayBusinessService/AccountCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payBusinessServiceClient) GetTradeUUID(ctx context.Context, in *GetTradeUUIDRequest, opts ...grpc.CallOption) (*GetTradeUUIDResponse, error) {
	out := new(GetTradeUUIDResponse)
	err := c.cc.Invoke(ctx, "/pay_business.PayBusinessService/GetTradeUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayBusinessServiceServer is the server API for PayBusinessService service.
type PayBusinessServiceServer interface {
	// 统一收单支付
	TradePay(context.Context, *TradePayRequest) (*TradePayResponse, error)
	// 创建账户
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// 获取账户
	FindAccount(context.Context, *FindAccountRequest) (*FindAccountResponse, error)
	// 账户充值
	AccountCharge(context.Context, *AccountChargeRequest) (*AccountChargeResponse, error)
	// 获取交易唯一ID
	GetTradeUUID(context.Context, *GetTradeUUIDRequest) (*GetTradeUUIDResponse, error)
}

// UnimplementedPayBusinessServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPayBusinessServiceServer struct {
}

func (*UnimplementedPayBusinessServiceServer) TradePay(context.Context, *TradePayRequest) (*TradePayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradePay not implemented")
}
func (*UnimplementedPayBusinessServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedPayBusinessServiceServer) FindAccount(context.Context, *FindAccountRequest) (*FindAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccount not implemented")
}
func (*UnimplementedPayBusinessServiceServer) AccountCharge(context.Context, *AccountChargeRequest) (*AccountChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCharge not implemented")
}
func (*UnimplementedPayBusinessServiceServer) GetTradeUUID(context.Context, *GetTradeUUIDRequest) (*GetTradeUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeUUID not implemented")
}

func RegisterPayBusinessServiceServer(s *grpc.Server, srv PayBusinessServiceServer) {
	s.RegisterService(&_PayBusinessService_serviceDesc, srv)
}

func _PayBusinessService_TradePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradePayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayBusinessServiceServer).TradePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay_business.PayBusinessService/TradePay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayBusinessServiceServer).TradePay(ctx, req.(*TradePayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayBusinessService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayBusinessServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay_business.PayBusinessService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayBusinessServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayBusinessService_FindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayBusinessServiceServer).FindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay_business.PayBusinessService/FindAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayBusinessServiceServer).FindAccount(ctx, req.(*FindAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayBusinessService_AccountCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayBusinessServiceServer).AccountCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay_business.PayBusinessService/AccountCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayBusinessServiceServer).AccountCharge(ctx, req.(*AccountChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayBusinessService_GetTradeUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayBusinessServiceServer).GetTradeUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay_business.PayBusinessService/GetTradeUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayBusinessServiceServer).GetTradeUUID(ctx, req.(*GetTradeUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PayBusinessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pay_business.PayBusinessService",
	HandlerType: (*PayBusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TradePay",
			Handler:    _PayBusinessService_TradePay_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _PayBusinessService_CreateAccount_Handler,
		},
		{
			MethodName: "FindAccount",
			Handler:    _PayBusinessService_FindAccount_Handler,
		},
		{
			MethodName: "AccountCharge",
			Handler:    _PayBusinessService_AccountCharge_Handler,
		},
		{
			MethodName: "GetTradeUUID",
			Handler:    _PayBusinessService_GetTradeUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/micro_mall_pay_proto/pay_business/pay_business.proto",
}
